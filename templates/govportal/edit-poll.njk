{% extends "govportal/govportal.njk" %}

{% set thispage = 'govportal/edit-poll' %}
{% set pagetitle = 'Governor Portal | Edit Poll' %}
{% set actionname = 'Edit Poll' %}

{% set scripts = ['https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'] %}

{% block actioncontent %}
	<div class="message hidden"></div>
    <div id="idUpdate" style="display:none;">{{_id}}</div>
	<div class="form-container">
		<form>
			<div class="description">
				<div class="item">
					<input type="text" value= "{{title}}" required id="title">
					<label>Title</label>
				</div>
				<div class="item">
					<input type="date" id="date" value="{{ endTime }}">
					<label>End Date</label>
				</div>
			</div>
			<h2>Options</h2>
			<div class="options">
                {% for record in records %}
				<div class="option">
					<input type="text" value = "{{record.value}}" required>
					<label>Option {{loop.index}}</label>
					<button type="button" onclick="deleteOption(this.parentElement,'{{record ._id}}')" class="removeoption">&#10006;</button>
				</div>
                {% endfor %}
			</div>
			<button type="button" onclick="addOption()" class="addoption">&#10010; Add Option</button>
			<button type="button" onclick="savePoll()" style="width: 60%;">Save Changes</button>
		<form>
	</div>
{% endblock %}

{% block customjs %}
	<script>
		axios.defaults.withCredentials = true;
		axios.defaults.headers.common['X-CSRF-TOKEN'] = '{{ csrfToken }}';

		function addOption() {
			const parent = document.getElementsByClassName('options')[0];
			// parent.lastElementChild.previousElementSibling.lastElementChild.disabled = true; // disabling the last remove option button
			const div = document.createElement('div');
			div.className = 'option'
			div.innerHTML = `
				<input type="text" required>
				<label>Option ${parent.children.length + 1}</label>
				<button type="button" onclick="removeOption(this.parentElement)" class="removeoption">&#10006;</button>
			`
			parent.append(div);
		}
		function removeOption(element) {
			const parent = element.parentNode;
			try {
				if (parent.children.length === 1) return;
				element.remove();
				[...parent.children].forEach((element, i) => {
					element.children[1].innerHTML = `Option ${i + 1}`;
				});
			} catch (e) {
				parent.firstElementChild.value = '';
			}
		}

		async function deleteOption(element,id) {
			const parent = element.parentNode;
			const data = {
				pollId:document.getElementById('idUpdate').innerHTML,
                                optionId:id
			}
			try {
				element.remove();
				[...parent.children].forEach((element, i) => {
					element.children[1].innerHTML = `Option ${i + 1}`;
				});
				await axios.patch('/gov-portal/delete-option', { data: data });
			} catch (e) {
				parent.firstElementChild.value = '';
			}

		}

		async function savePoll() {
			const data = {
                id: document.getElementById('idUpdate').innerHTML,
				title: document.getElementById('title').value,
				endTime: document.getElementById('date').value,
				records: [...document.getElementsByClassName('option')].map(e => {
					return e.firstElementChild.value ? {
						value: e.firstElementChild.value
					} : null;
				}).filter(e => e)
			};
			var response = (await axios.patch('/gov-portal/edit-poll', { data: data })).data;
			console.log(response);
			const e = document.getElementsByClassName('message')[0];
			e.innerHTML = response.message;
			e.classList.add(response.success ? 'success' : 'error');
			e.classList.remove('hidden');
			setTimeout(function () {e.classList.add('hidden')}, 2000);
			if (response.success) {
				setTimeout(function () { location.reload();window.location.href = '/gov-portal/polls-management'; }, 3000);
			}
		}

		window.onload = () => {
			if (!axios.defaults.headers.common['X-CSRF-TOKEN']) axios.defaults.headers.common['X-CSRF-TOKEN'] = document.cookie.split('=')[1];
		}
	</script>
{% endblock %}

{% block customcss %}
	{{ super() }}
	<style>
		.message {
			position: absolute;
			top: 0;
			right: calc(50vw - 220px);
			padding: 20px;
			z-index: 1;
			color: #fff;
			font-weight: 600;
			font-size: 18px;
			width: 400px;
			transform-origin: top;
			transition: transform 0.3s ease;
			border-bottom-left-radius: 6px;
			border-bottom-right-radius: 6px;
		}
		.error {
			background-color: rgba(255, 51, 51, 0.85);
		}
		.success {
			background-color: rgba(75, 189, 67, 0.85);
		}
		.hidden {
			transform: scaleY(0);
		}
		.form-container{
			padding: 23px 25px;
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			transform: 0.3s;
		}
		form {
			display: flex;
			flex-direction: column;
			border: 2px solid rgba(255,255,255,0.1);
			border-radius: 12px;
			padding: 12px 5px;
			width: 40%;
			background-color: rgba(255,255,255,0.13);
			backdrop-filter: blur(5px);
		}
		form * {
			outline: none;
			border: none;
		}
		.description {
			display: flex;
			flex-direction: column;
		}
		.item {
			position: relative;
			margin: 20px 10px;
		}
		.options {
			display: flex;
			flex-direction: column;
		}
		.option {
			display: flex;
			position: relative;
			margin: 12px 10px;
			justify-content: center;
			align-items: center;
		}
		.option > input {
			width: 75%;
		}
		.option > label {
			left: 7%;
		}
		.addoption {
			background-color: rgb(75, 189, 67);
		}
		.removeoption {
			padding: 10px;
			margin: 10px;
			height: 50px;
			width: 50px;
		}
		h2 {
			margin-block-start: 0.83em;
			margin-block-end: 0.83em;
		}
		label{
			position: absolute;
			top: 50%;
			left: 5%;
			transform: translateY(-50%);
			color: #fff;
			font-weight: 600;
			font-size: 18px;
			pointer-events: none;
			transition: 0.3s;
		}
		input{
			background-color: rgba(255,255,255,0.07);
				font-size: 18px;
			font-weight: 300;
			height: 50px;
			width: 90%;
				border-radius: 8px;
				padding: 0 15px 0px 15px;
				border: 2px solid var(--light-gray);
				color: #fff;
				outline: none;
		}
		input:focus{
				border: 2px solid var(--red);
		}
		input:focus ~ label{
			top: -7px;
			font-size: 16px;
			color: var(--red);
			padding: 0 2px;
			background-color: rgba(0, 0, 0, 0);
		}
		input:valid ~ label{
			top: -7px;
			font-size: 16px;
			padding: 0 2px;
			background-color: rgba(0, 0, 0, 0);
		}
		button {
			align-self: center;
			margin-top: 19px;
			width: 44%;
			background-color: var(--red);
			color: white;
			padding: 12px 0;
			font-size: 18px;
			font-weight: 600;
			border-radius: 12px;
			cursor: pointer;
		}
		button:disabled {
			background-color: var(--light-gray);
		}
		@media (max-width: 1600px) {
			form {
				width: 50%;
			}
		}

		@media (max-width: 1300px) {
			form {
				width: 65%;
			}
		}

		@media (max-width: 1000px) {
			form {
				width: 75%;
			}
		}

	</style>
{% endblock %}
