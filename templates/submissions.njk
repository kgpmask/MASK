{% extends '_base.njk' %}
{% import '_form.njk' as forms %}

{% set thispage = 'submissions' %}
{% set pagetitle = 'Submit!' %}
{% set pagedesc = 'Submit your content here to release it form MASK, be it art work, AMVs or music covers.' %}

{% set scripts = ['https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'] %}

{% block pagecontent %}
	{% call forms.form('Submit your content here!') %}
		{{ forms.field('email', 'E-mail Address') }}
		{{ forms.field('name', 'Your Name (or a Psudonym, if you prefer)') }}
		{{ forms.radio('member', 'Are you a member of IIT Kharagpur?', [
			{
				'id':'yes',
				'label': 'Yes',
				'value': 'true'
			},
			{
				'id':'no',
				'label': 'No',
				'value': 'false'
			}]) }}
		{{ forms.select('type', 'What kind of content are you submitting?', [
			{
				'label': 'Art (Digital)',
				'value': 'dig-art'
			},
			{
				'label': 'Art (Traditional)',
				'value': 'trd-art'
			},
			{
				'label': 'Video (AMV)',
				'value': 'amv-vid'
			},
			{
				'label': 'Video (Animation)',
				'value': 'ani-vid'
			},
			{
				'label': 'Video (Instrumental Music)',
				'value': 'ins-mus'
			},
			{
				'label': 'Video (Vocal Music)',
				'value': 'voc-mus'
			}]) }}
		{{ forms.field('link', 'Please provide the Drive link of the content you wish to submit.') }}
		{{ forms.field('proof', 'If possible, please provide any proof of ownership for the same') }}
		{{ forms.field('social', 'Mention any social media handles youâ€™d like to be taggged in') }}
		{{ forms.button('submit', 'Submit', 'submitForm') }}
	{% endcall %}
{% endblock %}

{% block customcss %}
	{{ forms.formCss() }}
	<style>
		form {
			width: 70%;
		}
	</style>
{% endblock %}

{% block customjs %}
	{{ forms.formFunction() }}
	<script>
		axios.defaults.withCredentials = true;
		axios.defaults.headers.common['X-CSRF-TOKEN'] = '{{ csrfToken }}';

        function validateEmail(email) {
            const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            return emailRegex.test(email);
        }

        function validateName(name) {
            const nameRegex = /^[a-zA-Z\s]{3,25}$/;
            return name.trim() !== '' && nameRegex.test(name);
        }

        function validateMemberStatus(member) {
            return member === 'true' || member === 'false'; 
        }

        function validateContentType(type) {
            return type !== "";
        }

        function validateDriveLink(link) {
            const driveLinkRegex = /^(https:\/\/)?(www\.)?(drive\.google\.com\/[^\s]+)$/;
            return driveLinkRegex.test(link);
        }

        function validateProof(proof) {
            if (!proof) return true; 
            const urlRegex = /^(https?:\/\/)?([\w\-]+\.)+[\w\-]+(\/[\w\-./?%&=]*)?$/;
            return urlRegex.test(proof);
        }

        function validateSocial(social) {
            if (!social) return true;
            const socialRegex = /^(@[a-zA-Z0-9_]{1,15}|https?:\/\/[\w\-]+\.[\w\-]+(\/[\w\-./?%&=]*)?)$/;
            return socialRegex.test(social);
        }

        function validateForm(data) {
            if (!validateEmail(data.email)) {
                message({ success: false, message: "Please enter a valid email address." });
                return false;
            }
            if (!validateName(data.name)) {
                message({ success: false, message: "Name must be non-empty and contain only letters and spaces." });
                return false;
            }
            if (!validateMemberStatus(data.member)) {
                message({ success: false, message: "Please select whether you are a member of IIT Kharagpur." });
                return false;
            }
            if (!validateContentType(data.type)) {
                message({ success: false, message: "Please select the type of content you are submitting." });
                return false;
            }
            if (!validateDriveLink(data.link)) {
                message({ success: false, message: "Please enter a valid Google Drive link." });
                return false;
            }
            if (!validateProof(data.proof)) {
                message({ success: false, message: "If provided, proof must be a valid URL." });
                return false;
            }
            if (!validateSocial(data.social)) {
                message({ success: false, message: "If provided, social handle must be a valid @username or URL." });
                return false;
            }
            return true; 
        }

        async function submitForm () {
            const data = getData();
            if (!validateForm(data)) return; 
            console.log(data);
            const response = (await axios.post('/submissions', data)).data;
            message(response, '/');
        }
	</script>
{% endblock %} 
