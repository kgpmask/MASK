{% extends '_base.njk' %}

{% set thispage = 'newsletters' %}
{% set pagedesc = pagedesc if pagedesc else 'Newsletter: Manga and Anime Society Kharagpur' %}

{% set pagecount = pages.length %}

{% macro nextprevnewsletter() %}
	<div class="controls">
		<a{% if adjs[0] %} href="/newsletters/{{ adjs[0] }}"{% endif %}><button class="rel" {{ 'disabled' if not adjs[0] }}><span class="buttonicon">&#x21B0;</span><span class="buttontext">Prev Newsletter</span></button></a>
		<a href="/newsletters/{{ 'random' if (adjs[0] or adjs[1]) else '' }}"><button class="rel" {{ 'disabled' if not (adjs[0] or adjs[1]) }}><span class="buttonicon" id="random"><span class="icon-random"></span></span><span class="buttontext">Random</span></button></a>
		<a{% if adjs[1] %} href="/newsletters/{{ adjs[1] }}"{% endif %}><button class="rel" {{ 'disabled' if not adjs[1] }}><span class="buttonicon">&#x21B1;</span><span class="buttontext">Next Newsletter</span></button></a>
	</div>
{% endmacro %}

{% macro nextprevpage() %}
	<div class="page-change-container">
		<button class="rel" onclick="prevPage()"><span class="buttonicon">&#x2190;</span><span class="buttontext">{{ '<<' }}</span></button>
		<input type="number" min="0" max="{{ pagecount }}" onchange="scrollToPage(this.value)">
		<button class="rel" onclick="copyLink()">{{ 'Share' }}</button>
		<button class="rel" onclick="nextPage()"><span class="buttonicon">&#x2192;</span><span class="buttontext">{{ '>>' }}</span></button>
	</div>
{% endmacro %}

{% block pagecontent %}
	{{ nextprevnewsletter() }}
	<hr class="letter-breaker"/><br/>
	{% if pdf %}
		<div class="pdf-link"><a href="/assets/releases/{{ pdf }}" target="_blank" class="undecorated-link">
			<span class="icon-download" style="font-size:2em;line-height:50%"></span>
			<span style="position:relative;bottom:0.4em">&nbsp;&nbsp;Download PDF</span>
		</a></div>
	{% endif %}
	<h1>{{ pagetitle }}</h1>
	<!--<div id="button-controls"><div id="button-box">
		<span id="left-control-button">&#10094;</span>
		<span id="right-control-button">&#10095;</span>
	</div></div>-->
	<div id="pages-container">
		{{ nextprevpage() }}
		<div id="pages" onscroll="updatePageState()">
			{# {% block coverpage %}
			<div class="page cover-default" id="cover-page">
				<img id="cover-logo" src="/assets/transparent_logo.png"/>
				<br/>Manga and Anime<br/>Society, Kharagpur<br/>
				<br/>
				<div id="cover-page-title">{{ pagetitle }}</div>
				</div>
			{% endblock %} #}
			{% block coverpage %}
				<div class="page" id="cover-page"></div>
			{% endblock %}
			{# {% block article %}
				<div class="faded">This article hasn't been published yet - stay tuned!</div>
			{% endblock %} #}
			{% block article %}
				{% for page in pages %}
					{% include thispage+'/'+target+'/'+page%}
				{% endfor %}
			{% endblock %}
		</div>
		{{ nextprevpage() }}
	</div>
	<script>
		const spoilered = document.querySelectorAll('.spoiler');
		for (let i = 0; i < spoilered.length; i++) {
			const article = spoilered[i];
			article.addEventListener('click', () => {
				if (!article.classList.contains('spoiler')) return;
				article.classList.add('being-removed');
				setTimeout(() => article.classList.remove('spoiler'), 1000);
			});
		}
	</script>
	<br/><div style="width:200px;margin:10px auto;background-color:rgba(255,255,255,0.2);border-radius:5px;padding:10px;color:var(--light-gray);font-size:0.8em;text-align:justify-center">Swipe left/right or click and use arrow keys to scroll<br/>Best viewed on PC</div><hr class="letter-breaker"/><br/>
	{{ nextprevnewsletter() }}
{% endblock %}

{% block customcss %}
	<link rel="stylesheet" type="text/css" href="/assets/styles/icons.css"/>
	<style>
		div.controls {
			padding: 40px 20px;
			display: flex;
			width: 400px;
			margin: 0px auto;
			justify-content: space-between;
		}
		span.buttontext {
			display: block;
		}
		.buttonicon {
			display: none;
		}
		.letter-breaker {
			width: 420px;
			max-width: 90%;
			margin: auto;
		}
		span#flipped {
			transform: scale(-1);
			filter: flipH;
			-ms-filter: flipH;
		}
		button.rel {
			width: 100px;
			height: 30px;
			background-color: var(--gray);
			color: var(--off-white);
			border: 2px solid var(--ghost-gray);
			border-radius: 5px;
			cursor: pointer;
		}
		button.rel:disabled {
			background-color: var(--tinted-gray);
			border: 1px solid var(--gray);
			color: var(--ghost-gray);
			cursor: default;
		}
		button.rel:not(:disabled):hover {
			background-color: var(--middle-gray);
		}

		#button-controls {
			position: absolute;
			top: 50%;
			display: flex;
			justify-content: center;
			align-items: center;
			width: calc(100vw - 10px);
		}
		#button-box {
			width: 540px;
			max-width: 100%;
			display: flex;
			justify-content: space-between;
			font-size: 2.5em;
		}
		#left-control-button, #right-control-button {
			cursor: pointer;
			transition: transform 0.3s;
		}
		#left-control-button:hover, #right-control-button:hover {
			transform: scale(1.2);
			color: var(--off-white);
		}

		.page-change-container {
			margin: 10px auto;
		}

		.page-change-container > input[type="number"] {
			width: 80px;
			height: 25px;
			margin: 0 5px;
			border: solid 2px var(--light-gray);
			border-radius: 3px;
			background-color: var(--gray);
			color: var(--off-white);
			text-align: center;
			-moz-appearance: textfield;
		}

		.page-change-container > input[type="number"]::-webkit-outer-spin-button,
		.page-change-container > input[type="number"]::-webkit-inner-spin-button {
			-webkit-appearance: none;
			margin: 0px;
		}

		#pages-container {
			overflow: hidden;
			width: 80%;
			height: 100%;
			margin-bottom: 10px;
			position: relative;
			margin: auto;
		}
		#pages {
			display: flex;
			overflow-x: auto;
			scroll-snap-type: x mandatory;
			scroll-behavior: smooth;
			-webkit-overflow-scrolling: touch;
			height: 100%;
			width: 100%;
			-ms-overflow-style: none;
			scrollbar-width: none;
		}
		#pages::-webkit-scrollbar {
			display: none;
		}
		.ref{
			color: inherit;
			text-decoration: none;

		}
		.page {
			scroll-snap-align: start;
			scroll-snap-stop: always;
			flex-shrink: 0;
			width: 100%;
			margin-right: 20px;
			transform-origin: center center;
			transform: scale(1);
			transition: transform 0.8s;
			position: relative;
			display: block;
			justify-content: center;
			align-items: center;
			overflow: hidden;
			background: url(/assets/releases/page.png);
			box-sizing: border-box;
			padding-top: 20px;
			min-height: 645px;
			height: 96vh;
			border: 2px var(--light-pink);
			border-radius: 5px;
			color: var(--abyss);
			page-break-before: always;
		}
		div.cover-default {
			width: 420px;
			max-width: 100%;
			height: 594px;
			margin: 0 calc(50% - 210px);
		}
		.page:not(#cover-page) {
			counter-increment: page;
		}
		.page:not(#cover-page):after {
			content: counter(page) "/{{ pagecount }}";
			position: absolute;
			bottom: 0;
			right: 10px;
			padding: 5px 12px;
			font-size: 12px;
			opacity: 0.5;
			font-family: Ubuntu, Roboto, Arial, Open Sans, sans-serif !important;
			text-shadow: none !important;
		}
		@font-face {
			font-family: 'Cover';
			src: url('/assets/releases/cover-title-font.ttf') format('truetype');
		}
		#cover-page {
			background-color: var(--red);
			background-image: none;
			scroll-snap-align: center;
			font-size: 2em;
			font-weight: bold;
			font-family: Cover;
			text-shadow: -3px 0 var(--white), 0 3px var(--white), 3px 0 var(--white), 0 -3px var(--white);
		}
		#cover-logo {
			width: 70%;
		}
		#cover-page-title {
			font-size: 1.2em;
		}

		.article-full, .article-half {
			width: 90%;
			margin: auto;
			overflow-y: scroll;
			display: block;
			padding-right: 10px;
			scrollbar-color: var(--red) var(--off-white);
		}
		.article-full {
			max-height: 95%;
			min-height: 90%;
		}
		.article-half {
			max-height: 40%;
			min-height: 40%;
		}
		.article-full > h2, .article-half > h2, .article-header {
			opacity: 0.99;
			text-shadow: 0 0 3px var(--red);
			font-weight: bold;
		}
		.article-header {
			font-size: 1.5em;
		}
		.article-content {
			text-align: justify;
		}
		.article-content > p {
			margin-top: 5px;
			margin-bottom: 20px;
		}
		.article-content > small {
			text-align: center;
			font-size: 0.7em;
			width: 100%;
			display: inline-block;
		}
		.article-author {
			font-size: 0.8em;
		}
		.anime-info {
			font-size: 0.7em;
			border: 1px solid var(--darker-gray);
			text-align: left;
			margin: 20px auto;
		}
		.anime-info > tbody > tr > td {
			padding: 2px 10px;
		}
		.article-end {
			{# background-color: var(--red); #}
			-webkit-background-image: url(/assets/releases/divider.svg);
			background-image: url(/assets/releases/divider.svg);
			height: 80px;
			width: 270px;
			background-position: center;
			background-size: cover;
			background-repeat: no-repeat;
			margin: auto;
		}
		.anime-ratings {
			margin: auto;
			font-size: 0.8em
		}
		.anime-ratings > tbody > tr > td {
			width: 50%;
		}
		.anime-ratings > tbody > tr > td:nth-child(1) {
			text-align: right;
			padding-right: 5px
		}

		.spoiler {
			position: relative;
			display: inline-block;
			cursor: help;
		}
		.page .spoiler h2 {
			position: fixed;
			margin: auto;
			max-width: calc(100% - 48px);
		}
		.spoiler::before {
			content: 'Major spoilers ahead! Click to reveal';
			position: absolute;
			left: 0;
			top: 0;
			right: 0;
			height: 100%;
			border-radius: 1px;
			font-size: 3em;
			font-weight: bold;
			color: var(--middle-gray);
			background: var(--off-white);
			text-align: center;
			display: flex;
			align-items: center;
			justify-content: center;
			opacity: 1;
			position: fixed;
			transition: opacity 1.0s, transform 0.3s;
		}
		.being-removed:before {
			transform: translateY(-50%) rotateX(80deg);
			opacity: 0.6;
			transition: opacity 0.8s linear, transform 0.8s linear;
		}

		@media (max-width: 500px) {
			div.controls {
				width: 200px;
			}
			span.buttontext {
				display: none;
			}
			.buttonicon {
				display: block;
			}
			button.rel {
				width: 50px;
			}
			#pages-container {
				padding-left: 0;
				padding-right: 0;
				width: 100%;
			}
		}

		.pdf-link {
			padding: 20px 20px 15px;
			display: inline-block;
			border: 1px solid var(--off-white);
			border-radius: 5px;
			margin-bottom: 20px;
		}
	</style>
	{% block lettercss %}{% endblock %}
{% endblock %}

{% block customjs %}
	<script>
		function findCurrentPage () {
			const pagesContainer = document.querySelector('#pages');
			const pages = [...pagesContainer.children];
			const offsetLeft = pagesContainer.scrollLeft;
			return pages.map((page, i) => [Math.abs(page.offsetLeft - offsetLeft), i]).sort((a, b) => -(a[0] < b[0]))[0][1];
		}

		function updatePageState () {
			const currentPage = findCurrentPage();
			[...document.querySelectorAll('input[type="number"]')].forEach(input => input.value = `${currentPage}`);
		}

		function scrollToPage (n) {
			if (n === '') return;
			const pagesContainer = document.querySelector('#pages');
			const pages = document.querySelectorAll('.page');
			if (!pages[~~n]) scrollToPage(~~n < 0 ? 0 : pages.length - 1);
			pagesContainer.scrollTo(pages[~~n].offsetLeft, 0);
			updatePageState();
		}

		function nextPage () {
			const pages = document.querySelectorAll('.page');
			const currentPage = findCurrentPage();
			scrollToPage( Math.min(currentPage + 1, pages.length - 1) );
		}

		function prevPage () {
			const currentPage = findCurrentPage();
			scrollToPage( Math.max(currentPage - 1, 0) );
		}

		function copyLink () {
			navigator.clipboard.writeText(`${window.location.href.split('?')[0]}?page=${findCurrentPage()}`);
			return alert('Copied to clipboard');
		}

		window.addEventListener('load', () => {{ 'scrollToPage('+ targetpage + ')' if targetpage else 'updatePageState()' }});
		window.addEventListener('load', () => setInterval(() => window.history.pushState({ }, "", window.location.href.split('?')[0] + `?page=${findCurrentPage()}`), 500));
	</script>
	<script>
		axios.defaults.withCredentials = true;
		axios.defaults.headers.common['X-CSRF-TOKEN'] = '{{ csrfToken }}';
	</script>
	{% block letterjs %}
	<script>
		function validateQuiz (index, which) {
			const selected = document.querySelector(`input[name="imgselect${which}${index}"]:checked`);
			if (!selected) return;
			axios.post(`/checker/2021-09-2/quiz${which}`, { index: index }).then(correct => {
				console.log(correct);
				const correctLabel = document.querySelector(`label[for="${which}-${index}-${correct.data}"]`);
				correctLabel.classList.add('correct-quiz-image');
			}).catch(console.log);
		}
	</script>
	<script type="text/javascript">
		//const tempWords = `CARLEY\nDOUGLAS\nERIKO\nIKUYA\nIZUMI\nKAITO\nKEI\nKOJI\nKONAKANO\nRITSU\nSATO\nSHINYA\nSOKABE\nTAKESHI\nYUTOSAKI\n`.split("\n").map(word => word.replace(/\t/g, '')), words = tempWords.map(word => word.replace(/[ -]/g, '').toUpperCase());
		const wordRows = wordMatrix.length;
		const wordCols = wordMatrix[0].length;
		let wordFound = [];
		let wordClick = false;
		function startWord () {
			let max = Math.max(wordRows, wordCols);
			let size = 40 * 10 / max - 3 + 'px';
			let fontsize = (10 / max) ** (1 / 2) + 'em';
			let mytablebody = document.getElementById('wordsearch-table');
			for (let i = 0; i < wordRows; i++) {
				let mycurrent_row = document.createElement('tr');
				for (let j = 0; j < wordCols; j++) {
					let mycurrent_cell = document.createElement('td');
					mycurrent_cell.classList.add('wordsearch-cell');
					mycurrent_cell.setAttribute('id', `wordsearch-cell-${i}-${j}`);
					mycurrent_cell.setAttribute('data-posI', i);
					mycurrent_cell.setAttribute('data-posJ', j);
					/*mycurrent_cell.style.width = size;
					mycurrent_cell.style.minWidth = size;
					mycurrent_cell.style.height = size;
					mycurrent_cell.style.maxHeight = size;
					mycurrent_cell.style.fontSize = fontsize;*/
					let currenttext = document.createTextNode(wordMatrix[i][j]);
					mycurrent_cell.addEventListener('click', function (event) {
						if (wordClick) {
							const start = wordClick;
							const final = [~~this.getAttribute('data-posI'), ~~this.getAttribute('data-posJ')];
							wordClick = false;
							if (start[0] === final[0] && start[1] === final[1]) return; //same position
							if (start[0] === final[0] || start[1] === final[1] || (Math.abs(start[0] - final[0]) === Math.abs(start[1] - final[1]))) {
								let word = '';
								let offsets = [Math.sign(final[0] - start[0]), Math.sign(final[1] - start[1])];
								for (let [i, j] = start; (i !== final[0] || j !== final[1]); [i += offsets[0], j += offsets[1]]) word += wordMatrix[i][j];
								word += wordMatrix[final[0]][final[1]];
								console.log(word);
								if (words.includes(word) && !wordFound.includes(word)) {
									wordFound.push(word);
									document.getElementById(`wordsearch-word-${word.toLowerCase()}`).classList.add('found-word');
									if (words.length === wordFound.length) {
										mytablebody.id = 'table-complete';
										const wordsList = document.getElementById('wordsearch-words');
										wordsList.style.animation = 'fadeOut 1.5s';
										wordsList.style.opacity = 0.1;
										setTimeout(function () {
											document.getElementById(`wordsearch`).innerHTML = `<div class="wordsearch-complete">Completed!</div>`;
										}, 1500);
									}
								}
							}
							return; // invalid
						}
						else {
							wordClick = [~~this.getAttribute('data-posI'), ~~this.getAttribute('data-posJ')];
						}
					}, false);
					mycurrent_cell.addEventListener('mouseover', function (event) {
						if (wordClick) {
							const start = wordClick;
							const final = [~~this.getAttribute('data-posI'), ~~this.getAttribute('data-posJ')];
							if (start[0] === final[0] && start[1] === final[1]) return; //same position
							if (start[0] === final[0] || start[1] === final[1] || (Math.abs(start[0] - final[0]) === Math.abs(start[1] - final[1]))) {
								let offsets = [Math.sign(final[0] - start[0]), Math.sign(final[1] - start[1])];
								for (let [i, j] = start; (i !== final[0] + offsets[0] || j !== final[1] + offsets[1]); [i += offsets[0], j += offsets[1]]) {
									let tempCell = document.getElementById(`wordsearch-cell-${i}-${j}`);
									tempCell.classList.add('wordsearchCellS');
								}
							}
						}
						event.target.classList.add('wordsearchCellH');
					}, false);
					mycurrent_cell.addEventListener('mouseleave', function (event) {
						for (let i = 0; i < wordRows; i++) {
							for (let j = 0; j < wordCols; j++) {
								let tempCell = document.getElementById(`wordsearch-cell-${i}-${j}`);
								tempCell.classList.remove('wordsearchCellH');
								tempCell.classList.remove('wordsearchCellS');
							}
						}
					}, false);
					mycurrent_cell.appendChild(currenttext);
					mycurrent_row.appendChild(mycurrent_cell);
				}
				mytablebody.appendChild(mycurrent_row);
			}
			let colnum = Math.ceil(words.length / 5);
			let wordArea = document.getElementById('wordsearch-words');
			wordArea.innerHTML = tempWords.map(word => `<div id="wordsearch-word-${word.replace(/[ \t-]/g, '').toLowerCase()}" class="wordsearch-word">${word}</div>`).join('');
		}
	</script>
	<script>
		'use strict';
		const crossRows = crossMatrix.length;
		const crossCols = crossMatrix[0].length;
		const crossFound = crossMatrix.map(row => row.map(() => '-'));
		let crossClick = false;
		let crossDir = false; // 1234 NESW
		let crosswordVis = false;
		function startCross () {
			let mytablebody = document.getElementById('crossword-table');
			for (let i = 0; i < crossRows; i++) {
				let mycurrent_row = document.createElement('tr');
				for (let j = 0; j < crossCols; j++) {
					let mycurrent_cell = document.createElement('td');
					if (crossMatrix[i][j] === '-') {
						mycurrent_cell.classList.add('crossword-cell-blank');
						mycurrent_cell.setAttribute('data-cell', '');
					} else {
						mycurrent_cell.classList.add('crossword-cell');
						mycurrent_cell.setAttribute('data-cell', '1');
						if (((!i || crossMatrix[i - 1][j] === '-') && crossMatrix[i + 1] && crossMatrix[i + 1][j] === ' ') || ((!j || crossMatrix[i][j - 1] === '-') && crossMatrix[i][j + 1] === ' ')) {
							mycurrent_cell.classList.add('crossword-count');
						}
					}
					mycurrent_cell.setAttribute('id', `crossword-cell-${i}-${j}`);
					mycurrent_cell.setAttribute('data-posI', i);
					mycurrent_cell.setAttribute('data-posJ', j);
					mycurrent_cell.addEventListener('click', function (event) {
						for (let i = 0; i < crossRows; i++) {
							for (let j = 0; j < crossCols; j++) {
								let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
								tempCell.classList.remove('crosswordCellH');
								tempCell.classList.remove('crosswordCellS');
							}
						}
						crossClick = [~~this.getAttribute('data-posI'), ~~this.getAttribute('data-posJ')];
						if (crossMatrix[crossClick[0]][crossClick[1]] === '-') crossClick = false;
						else event.target.classList.add('crosswordCellH');
					}, false);
					mycurrent_row.appendChild(mycurrent_cell);
				}
				mytablebody.appendChild(mycurrent_row);
			}
			document.addEventListener('keydown', function (e) {
				if (!crosswordVis) return;
				if (crossClick) {
					if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105)) {
						let tempCell = document.getElementById(`crossword-cell-${crossClick[0]}-${crossClick[1]}`);
						let currenttext = e.keyCode < 96 ? String.fromCharCode(e.keyCode) : e.keyCode - 96;
						tempCell.innerHTML = currenttext;
						crossFound[crossClick[0]][crossClick[1]] = currenttext;
						// check if crossword is completed
						if (!letterSpaces.find(([i, j]) => crossFound[i][j] === '-')) {
							console.log('Sending POST request');
							axios.post(`/checker/{{ target }}/crossword`, crossFound).then(res => {
								if (res.data) {
									mytablebody.classList.add('table-complete-cross');
									setTimeout(function () {
										document.getElementById(`crossword`).innerHTML = `<div class="crossword-complete">Completed!</div>`;
									}, 1600);
								}
							}).catch(err => console.log(err));
						}
						const nexts = [];
						(() => {
							const a = crossClick;
							nexts.push({ c: [a[0] + 1, a[1]], d: 3 });
							nexts.push({ c: [a[0], a[1] + 1], d: 2 });
							if (crossDir) {
								const o = [null, [-1, 0], [0, 1], [1, 0], [0, -1]][crossDir];
								nexts.unshift({ c: [a[0] + o[0], a[1] + o[1]], d: crossDir });
							}
						})();
						return nexts.find(coords => {
							const cell = document.getElementById(`crossword-cell-${coords.c[0]}-${coords.c[1]}`);
							if (cell && cell.getAttribute('data-cell')) {
								crossClick = coords.c;
								crossDir = coords.d;
								for (let i = 0; i < crossRows; i++) {
									for (let j = 0; j < crossCols; j++) {
										let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
										tempCell.classList.remove('crosswordCellH');
										tempCell.classList.remove('crosswordCellS');
									}
								}
								cell.classList.add('crosswordCellH');
								return true;
							}
						});
					}
					if ((e.keyCode >= 48 && e.keyCode <= 57) && (e.keyCode >= 96 && e.keyCode <= 105)) {
						e
					}
					if (e.keyCode >= 37 && e.keyCode <= 40) {
						const offsets = {
							'37': [0, -1],
							'38': [-1, 0],
							'39': [0, +1],
							'40': [+1, 0]
						}, keyDir = {
							'37': 4,
							'38': 1,
							'39': 2,
							'40': 3
						};
						e.preventDefault();
						const next = document.getElementById(`crossword-cell-${crossClick[0] + offsets[e.keyCode][0]}-${crossClick[1] + offsets[e.keyCode][1]}`);
						if (next && next.getAttribute('data-cell')) {
							crossClick[0] += offsets[e.keyCode][0];
							crossClick[1] += offsets[e.keyCode][1];
							for (let i = 0; i < crossRows; i++) {
								for (let j = 0; j < crossCols; j++) {
									let tempCell = document.getElementById(`crossword-cell-${i}-${j}`);
									tempCell.classList.remove('crosswordCellH');
									tempCell.classList.remove('crosswordCellS');
								}
							}
							next.classList.add('crosswordCellH');
							crossDir = keyDir[e.keyCode];
							return;
						}
					}
					if ([8, 46].includes(e.keyCode)) {
						document.getElementById(`crossword-cell-${crossClick[0]}-${crossClick[1]}`).innerHTML = '';
						crossFound[crossClick[0]][crossClick[1]] = '-';
					}
				}
			});}
		</script>
	{% endblock %}
	{% block cluejs %}{% endblock %}
{% endblock %}

{% set scripts = ['https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'] %}
